 Good Rules Scale
==================

 An example 
------------

We believe that programming patterns that work also scale. So rules that work 
for a Class Method should also work for a Class, a Package (or Module) or an 
entire product. We also believe that most problems we encounter in software 
development are not new. They've probably already been solved in other areas of 
expertise. As the largest problem in programming is communication, we are lucky 
to have many sources to base our solutions on.

One of the sources that we think can be beneficial is George Orwell's "Politics 
and the English Language" in which he proposes six rules to help people write 
neater and more understandable text:

1. Never use a metaphor, simile, or other figure of speech which you are used to seeing in print.
2. Never use a long word where a short one will do.
3. If it is possible to cut a word out, always cut it out.
4. Never use the passive where you can use the active.
5. Never use a foreign phrase, a scientific word, or a jargon word if you can think of an everyday English equivalent.
6. Break any of these rules sooner than say anything outright barbarous.

In and of themselves these rules can easily be applied as naming conventions at 
all levels of software creation (yes, I said ALL. Good rules scale, remember?)

 Breaking it down step by step 
-------------------------------

With a little bit of effort these rules can just as easily be addapted to coding 
conventions.


### Rules 1 and 5

As all software developers should know, quoting Phil Karlton, there are only two 
hard things in Computer Science: cache invalidation and naming things.

Rules one and five are both, sort-of, saying the same thing. We could interpret 
this on a broader scale. Do not abusing something for what it is not meant. 
Do not use something for which a better (more easily understood and/or more consise)
alternative exists.

So what are the code equivalents of a metaphor, a simile, or a figure of speech?
What are the code equivalents of a foreign phrase, a scientific word, or a 
jargon word?

@TODO: Write out rule nr.1 and nr.5

### Rules 2 and 3 and 6

If we substitute the word "word" in rules two and three and the word "say" in 
rule six for the word "code" (and edit for the sake of sanity and readability), 
these rules still hold their own.

The main reason for these rules, besides legibility, is courteousness. Or, to 
adhere  to rule nr.2: Being Polite. The rudest code is not the code that stinks 
but the code that does not work. Poorly written, bug-ridden, brittle code can 
cripple a project, a code-base, or even an entire company. Well behaved code 
is code that works like it should, with clearly defined and predictable behaviour. 

With this in mind, rule number six becomes:

> Break any of these rules sooner than code anything outright barbarous.

### Rule nr.4

> Never use the passive where you can use the active.

I am reminded of the more common naming conventions, to use nouns for naming your 
Classes and verbs for naming your Class Methods.

There are many resources that go on (at length) about this sort of thing. Books 
like "Clean Code" have entire chapters detailing the rational behind this.

So how do we change this rule so it scales from a naming convention to a coding
convention?

@TODO: Write out rule nr.4

 The end result
----------------

Putting this together we arrived at the following rules:

1. 
2. Never use much code where little code will do.
3. If it is possible to cut code out, always cut it out.
4. 
5. 
6. Break any of these rules sooner than code anything outright barbarous.



http://en.wikipedia.org/wiki/Politics_and_the_English_Language
http://www.resort.com/~prime8/Orwell/patee.html

@TODO: Add more of the resource mentioned in the text! (A quote is only as good as its source) 

#EOF
